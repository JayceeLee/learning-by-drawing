Metadata-Version: 2.1
Name: netdissect
Version: 0.0.2
Summary: Network Dissection
Home-page: https://github.com/davidbau/quick-netdissect
Author: David Bau
Author-email: davidbau@csail.mit.edu
License: UNKNOWN
Description: netdissect
        ==========
        
        [Network Dissection](http://netdissect.csail.mit.edu/) is a way
        to inspect the internal representations of a deep convolutional
        neural network to understand how internal units align with
        human-interpretable concepts.
        
        This new version is able to analyze both classification networks
        and generative networks (such as GANs).  It depends on python 3
        and pytorch 4.1.
        
        ## Setup
        
        To install everything needed from this repo, have `conda` available,
        and run:
        
        ```
        script/setup_env.sh      # Create a conda environment with dependencies
        script/download_data.sh  # Download support data and demo GANs
        source activate netd     # Enter the conda environment
        pip install -v -e .      # Link the local netdissect package into the env
        ```
        
        Details.  The code depends on python 3, pytorch 4.1, and several other
        packages.  For conda users, `script/environment.yml` provides the details.
        For pip users, `setup.py` lists dependencies.
        
        Data.  The `download_data.sh` script downloads the segmentation dataset
        used to dissect classifiers, the segmentation network used to dissect GANs,
        and several example GAN models to dissect.  The downloads will go into
        the directories `dataset/` and `models/`.  If you do not wish to download
        the example networks, `python -m netdissect --download` will download
        just the data and models needed for netdissect itself.
        
        
        ## Dissecting a GAN
        
        GAN example: to dissect three layers of the LSUN living room progressive
        GAN trained by Karras:
        
        ```
        python -m netdissect \
           --gan \
           --model "netdissect.proggan.from_pth_file('models/karras/livingroom_lsun.pth')" \
           --outdir "dissect/livingroom" \
           --layer layer1 layer4 layer7 \
           --size 1000
        ```
        
        The `--model` argument is a fully-qualified python function or constructor
        for loading the GAN to test; you can substitute your own model.  The
        `--layer` names are fully-qualified (`state_dict`-style) names for layers.
        
        By default a scene-based segmentation is used but a different segmenter class
        can be substituted by supplying an alternate class constructor to
        `--segmenter`.  See `netdissect/segmenter.py` for the sgementer base class.
        
        ## Dissecting a Classifier
        
        Classifier example: to dissect three layers of the pretrained alexnet
        in torchvision:
        
        ```
        python -m netdissect \
           --model "torchvision.models.alexnet(pretrained=True)" \
           --layers features.6:conv3 features.8:conv4 features.10:conv5 \
           --imgsize 227 \
           --outdir dissect/alexnet-imagenet
        ```
        
        ## Command Line Details
        
        Documentation for the netdissect command-line utility.
        
        ```
        usage: python -m netdissect [-h] [--model MODEL] [--pthfile PTHFILE]
                                    [--outdir OUTDIR] [--layers LAYERS [LAYERS ...]]
                                    [--segments SEGMENTS] [--segmenter SEGMENTER]
                                    [--download] [--imgsize IMGSIZE]
                                    [--netname NETNAME] [--meta META [META ...]]
                                    [--examples EXAMPLES] [--size SIZE]
                                    [--batch_size BATCH_SIZE]
                                    [--num_workers NUM_WORKERS]
                                    [--quantile_threshold {[0-1],iqr}] [--no-labels]
                                    [--maxiou] [--covariance] [--no-images]
                                    [--no-report] [--no-cuda] [--gen] [--gan]
                                    [--perturbation PERTURBATION] [--add_scale_offset]
                                    [--quiet]
        ```
        
        optional arguments:
        
        ```
          -h, --help            show this help message and exit
          --model MODEL         constructor for the model to test
          --pthfile PTHFILE     filename of .pth file for the model
          --outdir OUTDIR       directory for dissection output
          --layers LAYERS [LAYERS ...]
                                space-separated list of layer names to dissect, in the
                                form layername[:reportedname]
          --segments SEGMENTS   directory containing segmentation dataset
          --segmenter SEGMENTER
                                constructor for asegmenter class
          --download            downloads Broden dataset if needed
          --imgsize IMGSIZE     input image size to use
          --netname NETNAME     name for network in generated reports
          --meta META [META ...]
                                json files of metadata to add to report
          --examples EXAMPLES   number of image examples per unit
          --size SIZE           dataset subset size to use
          --batch_size BATCH_SIZE
                                batch size for forward pass
          --num_workers NUM_WORKERS
                                number of DataLoader workers
          --quantile_threshold {[0-1],iqr}
                                quantile to use for masks
          --no-labels           disables labeling of units
          --maxiou              enables maxiou calculation
          --covariance          enables covariance calculation
          --no-images           disables generation of unit images
          --no-report           disables generation report summary
          --no-cuda             disables CUDA usage
          --gen                 test a generator model (e.g., a GAN)
          --gan                 synonym for --gen
          --perturbation PERTURBATION
                                filename of perturbation attack to apply
          --add_scale_offset    offsets masks according to stride and padding
          --quiet               silences console output
        ```
        
        ## API, for classifiers
        
        It can be used from code as a function, as follows:
        
        1. Load up the convolutional model you wish to dissect, and call
           `retain_layers(model, [layernames,..])` to instrument the model.
        2. Load the segmentation dataset using the BrodenDataset class;
           use the `transform_image` argument to normalize images to be
           suitable for the model, and the `size` argument to truncate the dataset.
        3. Choose a directory in which to write the output, and call
           `dissect(outdir, model, dataset)`.
        
        A quick approximate dissection can be done by reducing the `size`
        of the `BrodenDataset`.  Generating example images can be time-consuming
        and the number of images can be set via `examples_per_unit`.
        
        Example:
        
        ```
            from netdissect import retain_layers, dissect
            from netdissect import ReverseNormalize
        
            model = load_my_model()
            model.eval()
            model.cuda()
            retain_layers(model, ['conv1', 'conv2', 'conv3', 'conv4', 'conv5'])
            bds = BrodenDataset('dataset/broden1_227',
                    transform_image=transforms.Compose([
                        transforms.ToTensor(),
                        transforms.Normalize(IMAGE_MEAN, IMAGE_STDEV)]),
                    size=10000)
            dissect('result/dissect', model, bds,
                    batch_size=100,
                    examples_per_unit=10)
        ```
        
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.5.2
Description-Content-Type: text/markdown
